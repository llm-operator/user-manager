syntax = "proto3";

package llmoperator.users.server.v1;

import "google/api/annotations.proto";

option go_package = "github.com/llm-operator/user-manager/api/v1";

message APIKey {
  string id = 1;
  string object = 2;
  string name = 3;
  // secret is populated only when a new API key is created.
  string secret = 4;
  int64 created_at = 5;
  User user = 6;
  Organization organization = 7;
}

message User {
  string id = 1;
}

enum Role {
  UNSPECIFIED = 0;
  OWNER = 1;
  READER = 2;
}

message OrganizationUser {
  string user_id = 1;
  string organization_id = 2;
  Role role = 3;
}

message Organization {
  string id = 1;
  string title = 2;
  int64 created_at = 3;
}

message CreateAPIKeyRequest {
  string name = 1;
}

message ListAPIKeysRequest {
}

message ListAPIKeysResponse {
  string object = 1;
  repeated APIKey data = 2;
}

message DeleteAPIKeyRequest {
  string id = 1;
}

message DeleteAPIKeyResponse {
  string id = 1;
  string object = 2;
  bool deleted = 3;
}

message CreateOrganizationRequest {
  string title = 1;
}

message ListOrganizationsRequest {
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
}

message DeleteOrganizationRequest {
  string id = 1;
}

message DeleteOrganizationResponse {
}

message AddUserToOrganizationRequest {
  OrganizationUser user = 1;
}

message AddUserToOrganizationResponse {
}

message ListOrganizationUsersRequest {
}

message ListOrganizationUsersResponse {
  repeated OrganizationUser users = 1;
}

service UsersService {
  rpc CreateAPIKey(CreateAPIKeyRequest) returns (APIKey) {
    option (google.api.http) = {
      post: "/v1/users/api_keys"
      body: "*"
    };
  }

  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {
    option (google.api.http) = {
      get: "/v1/users/api_keys"
    };
  }

  rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (DeleteAPIKeyResponse) {
    option (google.api.http) = {
      delete: "/v1/users/api_keys/{id}"
    };
  }

  rpc CreateOrganization(CreateOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      post: "/v1/organizations"
      body: "*"
    };
  }
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations"
    };
  }
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/{id}"
    };
  }

  rpc AddUserToOrganization(AddUserToOrganizationRequest) returns (AddUserToOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{user.organization_id}/users:addUser"
      body: "*"
    };
  }
}

service UsersInternalService {
  rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {
  }
  rpc ListOrganizationUsers(ListOrganizationUsersRequest) returns (ListOrganizationUsersResponse) {
  }
}
